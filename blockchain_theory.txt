
Blockchain Theory: Understanding Blocks
==========================================

What's a Block?
------------------
Of course a "Blockchain" consists of multiple "Blocks" - and a single Block 
simply can be considered a data storage/ container. You can store ANY data of 
your choice in a Block.

Cryptocurrencies like Bitcoin are the most prominent use-case of the Blockchain 
technology but you can also store simple text in Blocks if you want to. 
Of course using a Blockchain makes most sense for data that should be secure and 
distributed across a broad network though. Data transparency and safety are key 
advantages of the Blockchain.

Even when considering Cryptocurrencies, you don't actually store the coins in a Block 
but rather the transactions between users. A transaction then includes an amount of 
coins that should be transferred.

In this course, the Blocks we start with only holds a number. So you can think of it 
as a transaction, though the sender and recipient is missing. But that's something which 
will be added once we had a look at more complex data structures than simple lists.

Multiple Blocks in a list of Blocks then form the first simple Blockchain. No worries, 
it'll get more complex than that over the course of the remaining modules!


Understanding Blockchain Verification
----------------------------------------

A core concept of the Blockchain technology is that individual Blocks should be connected. 
Each Block knows the Block coming prior to itself. So Block C knows Block B which 
in turn is aware of Block A.

What does "Know" mean though?

To ensure data integrity, a hash is calculated for each Block. We're not doing this 
yet but we'll add this functionality throughout the course.

For now, we simply store the complete value of Block B in Block C which then is 
stored in Block D - and so on.

This allows us to check whether a certain Block in the Blockchain still looks the way 
it looked like when the Block after it was added. So if we change Block B after we added 
Block C, Block C will recognize that because it saved a snapshot of Block B when 
it (=> Block C) was created.

This ensures that the Blockchain can't be manipulated by other users. If you change a 
value, the other Blocks coming after it will recognize that.

Of course, you could theoretically edit the entire Blockchain. We'll add more 
security mechanisms throughout the course to ensure that this also doesn't work. 
The relation between Blocks is a first important building block though.


Understanding Transactions
----------------------------

As mentioned earlier, a Blockchain is all about storing data in Blocks. And for a 
Cryptocurrency, that data are Transactions (NOT Coins!).

Transactions typically require three pieces of information:

Who sends the coins? [sender ]
Who receives the coins? [recipient ]
How many coins are sent? [amount ]
A transaction is treated as an "Open Transaction" until it's included in a new block. 
Only transactions that are part of a block have been "processed" and their 
attached amounts are hence available to the recipient.

One Block typically contains more than one Transaction - in this course, we'll 
simply add all open transactions. Once the Block has been created, the 
"Open Transactions" are of course cleared.


Understanding Hashes
----------------------

The word "Hash" is omnipresent in the Blockchain world. It's important that 
you a) understand what exactly a Hash is and b) understand why we use Hashes.

a) What is a Hash?
To keep things simple, a Hash can simply be thought of as a long string 
(64 characters when using the SHA256 algorithm) that can NOT be reverse engineered. 
A hash is created based on some input values and the same input values will always 
yield the exact same Hash. So it's NOT a random value.

But you can't find out what the input was unless you have a Hash table - i.e. a 
map of inputs and resulting Hashes. That's of course something which is not easily 
created (brute force would be an option but you have billions of possible 
combinations - depending on the chosen Hashing algorithm).

b) Why do we use Hashes of Blocks instead of our "string concatenation" technique?
A Hash in our Blockchain has 64 characters. That's probably shorter than a Block 
with dozens of Transactions - the length of the Hash does not grow or shrink 
depending on the input value. So it's more efficient to store a Hash than to manually 
transform all data to string values.

We're not using a Hash because we want to hide the values. We could do this with 
a Hash but that's not the idea of a Blockchain. All the data should be publicly 
available, we don't want to hide the Block data - everyone should be able to check 
and validate the Blockchain.


Understanding the "Proof of Work"
------------------------------------

In the last video, you learned about the "Proof of Work" (PoW). What is it all about?

In our blockchain, we're already validating that Block #2 has the same hash of 
Block #1 stored which we would get if we would re-calculate the hash value of 
Block #2 (which we do as part of our verify-chain method!).

But this is not enough.

Someone could edit Block #1 (e.g. manipulate the transactions stored there) and then 
also update the block after it (Block #2) to hold the updated hash in the 
previous_hash  field. And that could then be done for the entire chain.

If we then validate the chain (on other nodes - we'll add nodes later in the course), 
the chain would be valid. 

That's a problem PoW solves.

Just having equal hashes is then NOT enough anymore. Instead, a so-called PoW number 
(also referred to as "Nonce") is guessed for each block. PoW is just a number, 
but it's a number which, together with other input data, yields a hash that suffices a 
condition defined by us (=> the creators of the blockchain).

That hash is NOT the hash we store in the previous_hash  field! It's not the hash we 
compare between blocks! We're simply using a hash for this check since it's convenient 
to check starting characters of a fixed-length (always 64 characters for SHA256) string.

A typical requirement is for the hash to start with X 0s (though you can come up with 
any condition of your choice). The more 0s we require, the longer it'll take to find a 
fitting PoW number - that's why for Bitcoin it can take multiple years to generate new 
block. It of course depends on your hardware setup and whether you're in a mining pool 
or not. It'll always take longer than just a few seconds though. For Bitcoin, a new block 
is added roughly every 10 minutes for example.

The hash we use to check the PoW typically takes the transactions that should be included 
in the new block as well as the previous block's hash and that PoW number into account.

And only if these three inputs yield a hash that starts with two 0s, we accept the hash 
and therefore the PoW. Since the transactions of the next block as well as the previous 
block's hash are static, only the PoW is adjusted until a matching hash is found.

The guessed (and fitting) PoW is then also stored in the mined block.

Other nodes can then easily confirm or deny the validity of the block since they just 
have to create a hash from the three input values (which are all known as they are 
included in the block). If the PoW doesn't lead to a valid hash, the block is not treated 
as valid and hence the overall chain is not accepted.

If some node tries to cheat, manipulating a block's transactions + the subsequent blocks 
previous_hash  values would NOT suffice anymore. For changed transactions and/ or 
previous_hash values, the old PoW wouldn't yield a valid PoW-hash anymore. A cheater would 
therefore have to re-calculate all PoW numbers for all subsequent blocks. This will take 
a huge amount of time since you typically don't check for two 0s but multiple leading 0s. 
And every additional leading 0 you add, vastly increases required computing time.

"Honest nodes" on the other hand only need to mine one new block in the time the cheater 
takes to re-calculate potentially dozens of blocks to render the cheater's chain invalid.

That's how PoW secures the blockchain.